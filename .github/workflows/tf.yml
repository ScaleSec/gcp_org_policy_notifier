name: Terraform lint and apply

### 
# terrafrom action repo/docs
# tf actions doc: https://github.com/marketplace/actions/hashicorp-setup-terraform
# gcp actions doc: 
#   - https://github.com/GoogleCloudPlatform/github-actions/tree/master/setup-gcloud
#   - https://github.com/actions-hub/gcloud
#
# defaults:
#   run:
#     working-directory: ${{ env.tf_actions_working_dir }}
on: [pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    name: TF stuff
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - run: gcloud info
    - name: Terraform fmt
      id: fmt
      run: terraform fmt
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init --backend-config="bucket=scalesec-terraform-state-files" --backend-config="prefix=gha-test/"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      env:    
        TF_VAR_function_name: ${{ secrets.FUNCTION_NAME }}
        TF_VAR_region: ${{ secrets.REGION }}
        TF_VAR_topic_name: ${{ secrets.TOPIC_NAME }}
        TF_VAR_job_name: ${{ secrets.JOB_NAME }}
        TF_VAR_project_id:  ${{ secrets.PROJECT_ID }}
        TF_VAR_policy_bucket: ${{ secrets.POLICY_BUCKET }}
        TF_VAR_file_location: ${{ secrets.FILE_LOCATION }}
        TF_VAR_policy_file: ${{ secrets.POLICY_FILE }}
        TF_VAR_org_id: ${{ secrets.ORG_ID }}
        TF_VAR_function_bucket: ${{ secrets.FUNCTION_BUCKET }}
        TF_VAR_secret_project: ${{ secrets.SECRET_PROJECT }}
        TF_VAR_secret_name: ${{ secrets.SECRET_NAME }}
        TF_VAR_secret_version: ${{ secrets.SECRET_VERSION }}
      id: plan
      run: |
        env |grep TF_VAR   
        terraform plan -no-color
      continue-on-error: true

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

